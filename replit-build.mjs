#!/usr/bin/env node
import { build as esbuildBuild } from 'esbuild';
import { execSync } from 'child_process';
import { existsSync, mkdirSync } from 'fs';

console.log('🚀 Replit Production Build Starting...');

try {
  // Ensure dist directory exists
  if (!existsSync('dist')) {
    mkdirSync('dist', { recursive: true });
  }

  // Build frontend
  console.log('📦 Building frontend with Vite...');
  execSync('vite build', { stdio: 'inherit' });

  // Build backend with explicit CommonJS output for better compatibility
  console.log('📦 Building backend for production...');
  await esbuildBuild({
    entryPoints: ['server/index.ts'],
    bundle: true,
    platform: 'node',
    format: 'esm',  // Keep ESM since package.json has type: module
    packages: 'external',
    outfile: 'dist/index.js',
    minify: true,
    sourcemap: false,
    target: 'node20',
    alias: {
      '@shared': './shared',
      '@': './client/src'
    },
    banner: {
      js: `
// Generated by Replit build process
// Node.js ES Module compatible build
import { createRequire } from 'module';
const require = createRequire(import.meta.url);
`
    }
  });

  // Verify build output
  if (!existsSync('dist/index.js')) {
    throw new Error('Build failed: dist/index.js not created');
  }

  const { statSync } = await import('fs');
  const stats = statSync('dist/index.js');
  
  console.log('✅ Build successful!');
  console.log(`📁 Output: dist/index.js (${(stats.size / 1024).toFixed(2)} KB)`);
  console.log('🚀 Ready for deployment!');
  
  process.exit(0);
} catch (error) {
  console.error('❌ Build failed:', error.message);
  process.exit(1);
}